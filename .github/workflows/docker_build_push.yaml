name: Build and Push Changed Pipelines

on:
  push:
    branches: [main]
    paths:
      - 'pbd/pipelines/**'
  workflow_dispatch:
    inputs:
      folder:
        description: 'Specific folder to build (inside pbd/pipelines/)'
        required: false
        type: string

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  detect-changed:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.detect.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed folders
        id: detect
        run: |
          echo "Detected manually dispatched folder: '${{ github.event.inputs.folder }}'"

          if [ -n "${{ github.event.inputs.folder }}" ]; then
            echo "changed=[\"${{ github.event.inputs.folder }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Fallback if no previous commit exists (e.g., force-push or shallow clone)
          PREV_COMMIT=$(git rev-parse HEAD^ 2>/dev/null || echo HEAD~1)

          # Get changed folders under pbd/pipelines
          CHANGED=$(git diff --name-only $PREV_COMMIT HEAD | grep '^pbd/pipelines/' | cut -d '/' -f3 | sort -u)

          # Filter for folders that actually still exist
          VALID_CHANGED=()
          for f in $CHANGED; do
            if [ -d "pbd/pipelines/$f" ]; then
              VALID_CHANGED+=("\"$f\"")
            fi
          done

          if [ ${#VALID_CHANGED[@]} -eq 0 ]; then
            echo "No valid folders to build. Exiting."
            echo "changed=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          CHANGED_JSON=$(printf "[%s]" "$(IFS=,; echo "${VALID_CHANGED[*]}")")
          echo "changed=$CHANGED_JSON" >> $GITHUB_OUTPUT
          echo "Detected folders: $CHANGED_JSON"

  build:
    needs: detect-changed
    if: ${{ needs.detect-changed.outputs.folders != '[]' && needs.detect-changed.outputs.folders != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changed.outputs.folders) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push ${{ matrix.folder }} Docker Image
        uses: docker/build-push-action@v6
        with:
          context: pbd/
          file: pbd/pipelines/${{ matrix.folder }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/pbd-${{ matrix.folder }}:latest
