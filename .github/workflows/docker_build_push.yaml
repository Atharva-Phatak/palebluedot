name: Build and Push Docker Images
on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Folder to build (optional - overrides change detection)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'pbd/pipelines/**'  # âœ… ADDED: trigger only when something inside pbd/pipelines changes

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_folders: ${{ steps.filter.outputs.folders }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Changed Folders
        id: filter
        run: |
          if [ -n "${{ inputs.folder }}" ]; then
            CHANGED='["${{ inputs.folder }}"]'
          elif [ $(git rev-list --count HEAD) -eq 1 ]; then
            # Initial commit: build everything
            CHANGED=$(find pbd/pipelines -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          else
            # Get all folders that were touched in this commit
            FOLDERS=$(git diff --name-status HEAD^ HEAD | grep '^pbd/pipelines/' | cut -f2 | cut -d '/' -f3 | sort -u)

            # Filter only existing ones
            EXISTING=()
            for folder in $FOLDERS; do
              if [ -d "pbd/pipelines/$folder" ]; then
                EXISTING+=("\"$folder\"")
              fi
            done

            # Join the valid folder names into a JSON array
            CHANGED=$(printf "[%s]" "$(IFS=,; echo "${EXISTING[*]}")")
          fi

          echo "folders=$CHANGED" >> $GITHUB_OUTPUT
          echo "Detected folders for build: $CHANGED"

  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_folders != '[]' && needs.detect-changes.outputs.changed_folders != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.changed_folders) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare Lowercase Repository Name
        id: repo-details
        run: |
          LOWERCASE_REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_name=$LOWERCASE_REPO_NAME" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Lowercase Repository Owner
        id: repo-owner
        run: |
          echo "repo_owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: pbd/
          file: pbd/pipelines/${{ matrix.folder }}/Dockerfile
          push: true
          tags: ghcr.io/${{ steps.repo-owner.outputs.repo_owner }}/pbd-${{ matrix.folder }}:latest
